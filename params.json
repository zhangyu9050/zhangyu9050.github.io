{"name":"zhangyu9050 - GitHub","tagline":"我虽然不是极客，但有极客的精神","body":"# Objective-C 里消息调用的一个优化技巧\r\n\r\n这里介绍一个小优化技巧，消息调用优化。一般情况下不需要这么做，在大循环里也许可以用到。我自己就从来没这么用过，不过值得给大家介绍一下。 objc的消息调用有一定cpu损耗在方法查询上，虽然非常小，但是当循环次数多时候，使用objc runtime方法分离开消息查找和调用就个很好的方法。例如下面的代码：\r\n\r\n    for (int i = 0; i < 100000000; i++)     \r\n        [someObject messageWithInt:i]; \r\n\r\n可以改写成：\r\n\r\n    SEL theSelector = @selector(messageWithInt:);\r\n    IMP theMethod = [someObject methodForSelector:theSelector];\r\n    for (int i = 0; i < 100000000; i++)   \r\n        theMethod (someObject, theSelector, i); \r\n\r\n这样可以让objc方法查找过程只执行1遍。循环内直接调用方法实现即可。\r\n\r\n这种方法需要非常注意的一点是，IMP是一个 void* 函数的 typedef 如果调用的函数有返回值，就需要非常谨慎了。你可以使用如下的形式：\r\n\r\n    typedef float (*MyMethodIMP)(id,SEL,int);  \r\n    SEL theSel = @selector(messageWithInt:); \r\n    MyMethodIMP theMethod = (MyMethodIMP)[someObject methodForSelector:theSel]; \r\n    \r\n    float result = 0.0;  \r\n    for (int i = 0; i < 100000000; i++)     \r\n        result += theMethod (someObject, theSel, i); \r\n\r\n这种优化方法不适合少次数的方法调用，实际上，分离后少次数调用速度有时候会比传统方法还慢一些。至于多少次适合，以自己做的测试为准。\r\n\r\n无论如何，当优化代码时候要格外谨慎。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}